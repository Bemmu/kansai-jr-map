17.2.2011

Just curious to see how much work it is to get the data that would allow
this map to be created:

tokyo-subway-map.gif

First have a list of stops of each line. Lines might branch or loop,
so all that the stop list means is that if stops come after each
other (with no empty line in between), then they are connected by
that line.

---

Actual metro map is not very much like reality at all. Metro map is
more a visualization of the graph rather than a location mapping of it.
Angles are always 45 degrees, even though in reality they can be
anything. Sometimes directions are radically different to get the map
to fit properly. Spaces between stations tend to be equal, even though
in reality they change.

Stations seem to have some kind of arbitrary importance to them. Tokyo
station is more visible in the metro map, even though it has just as many
connections as the smaller font Yurakucho has.

Could put kind of springs that try to force connections into 45 degree
turns? There might be opposing forces.

---

19.11.2015

Get back into programming groove by looking at this project.

Maybe I should do this for http://youinjapan.net/maps/osaka/kansai_jr_map.jpg
kansai instead? I could try to make this into a cool widget like the ones on
the homepage of the guy who made webcam toy.

Now don't panic, this will take several days to make. No need to rush into it.

Parts in this:

 - Extracting the timetables for all lines
  > They are going to be of the form "a train stops at S at time T"
  > Just one day would be enough, say Monday
  > On http://timetable.ekitan.com/train/TimeStation/16-30_D1.shtml you can see one stop along one line, clicking on the time shows the whole travel of the train
 - Engine to figure out the position of each train at time t, given the JSON file of all
 - Rendering, given 
  > Symbolical vs. real-life location blending, 0 is symbolical and 1 is real world, with some nice ease-in ease-out (well that can be separate)
   - Note that in real-life many stops will map in one spot, but in symbolical the stops are laid next to each other instead
  > Labels, different sizes and angles
  > Spline for 
   - How would you interpolate between two splines?
   - Maybe both should have same amount of control points
   - Does canvas have splines?
    - Yes ctx.bezierCurveTo
    -  context.lineCap = 'square';
  > Square spline caps
  > Oh shit, would also need to be able to know when given a bezier curve describing a train like to know.. coordinates of position p along the curve.
   - Stops would described as "point p along line L"
   - Maybe can copy the math from http://stackoverflow.com/questions/4058979/find-a-point-a-given-distance-along-a-simple-cubic-bezier-curve-on-an-iphone
   ? But some lines branch
  + Would be incredibly cool if the elevation of each station was included
  ? How would you fit the whole line map on the screen, would there be scrolling?

 - UI for scrobbing the time and switching between 
 - Some kind of data file to describe the shapes of all the lines

OK what's going to be the "ugh" point in this project?
 - Getting all the line data will involve data entry, which is probably easier to do by hand than to try to automate
 - Some info for what initially might seem like a different train may actually map to the same train, which is only looping
 - Representing a whole line as several connected bezier curves and then finding a position along the whole track might be challenging math-wise

 Maybe it should be more like 

 {
    'takarazuka' : {
      'train_1' : {'10:31' : 'Osaka', '10:35' : 'Kyoto' ...},
      'train_2' : {'10:41' : 'Osaka', '10:45' : 'Kyoto' ...},
      ...
    }
    'some_other_line' : {
      ...
    }
 }

Can a train hop from one line to another?

20.11.2015

I wonder if there is a way to show a point along a curve using SVG?

Realized that if in a loop line the start and end points don't overlap, then showing the train looping around from end back to start will have it float in midair. Or else it will just teleport back.

In SVG, you have a path.

<path
       style="fill:none;stroke:#7babdb;stroke-width:40.46795654px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 47.337827,45.94269 C 290.55995,334.25948 233.09383,285.14959 486.67212,289.88758 660.19791,293.12906 692.53424,265.95645 692.53424,265.95645"
       id="path2985"
       inkscape:connector-curvature="0"
       sodipodi:nodetypes="csc" />

Is there a way, from within JavaScript, to query a point within this path?

Maybe someone has solved this already. Maybe there exists some kind of library to interact with SVG from JS.

"Utility method Find dot coordinates on the given cubic bezier curve at the given t.
Raphael.findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t)"

Is the SVG path I have made of "cubic bezier curves"?

"Utility method Converts path to a new path where all segments are cubic bezier curves
Raphael.path2curve(pathString)"

OK cool, so if I have a path string I can first turn it into cubic bezier segments.

As a test I converted "M 47.337827,45.94269 C 290.55995,334.25948 233.09383,285.14959 486.67212,289.88758 660.19791,293.12906 692.53424,265.95645 692.53424,265.95645" and the result was an array where each element is a sub-array:

[['M', 47.337827, 45.94269],
 ['C', 290.55995, ... , 289.88758], (each had 6 numbers)
 ['C', 660.19791, ... , 265.95645]]

There are 6 numbers here, but findDotsAtSegment takes 8?

This article has a pretty good picture that probably explains it "Stitching curves together":
http://devmag.org.za/2011/04/05/bzier-curves-a-tutorial/

Also, if I have a big path some curves will be a lot shorter. To find a point along the total curve, would need to take into account the lengths of each subsegment.

---

Vector3 CalculateBezierPoint(float t,
  Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3)
http://devmag.org.za/2011/04/05/bzier-curves-a-tutorial/

One strategy that should work:
 - Turn the whole path into line segments first
 - Interpolating line segments is then straightforward
 - Can still draw the actual curve as a curve to get best outcome

---

29.11.2015

http://mta.me/

JＲ東海道本線 米原方面

Train that leaves from osaka and arrives in 新大阪 at 05:03 and leaves from 新大阪 at 05:04 is at url:
http://timetable.ekitan.com/train/OneTrainTimetable?SFCODE=5006&SFNAME=%91%E5%8D%E3&HOUR=05&MIN=00&TXKEY=500310-13602-502B&DW=2

And if I go to 新大阪 and check the time table?
Then there it says 05:04, so the table is based on departure time.
And clicking there the url is 
http://timetable.ekitan.com/train/OneTrainTimetable?SFCODE=5429&SFNAME=%90V%91%E5%8D%E3&HOUR=05&MIN=04&TXKEY=500310-13602-502B&DW=2

So TXKEY is the train?
500310-13602-502B

Check another train going to somewhere else...
Yeah that's different.
How about another train but on the same line going same way?

Here is one train in the loop line:
http://timetable.ekitan.com/train/OneTrainTimetable?SFCODE=5006&SFNAME=%91%E5%8D%E3&HOUR=04&MIN=55&TXKEY=720100-44616-1302&DW=2

After it loops over, is the TXKEY still the same?
05:39 大阪発天王寺行き

This round it is 
http://timetable.ekitan.com/train/OneTrainTimetable?SFCODE=5006&SFNAME=%91%E5%8D%E3&HOUR=05&MIN=39&TXKEY=720100-1201-1312&DW=2

What about the round after that, starting at 06:24?
http://timetable.ekitan.com/train/OneTrainTimetable?SFCODE=5006&SFNAME=%91%E5%8D%E3&HOUR=06&MIN=24&TXKEY=720100-1286-1330&DW=2

So seems for the same train the first part is the same.

Probably every station is connected in graph, so could just explore out.

Ah, SFCODE seems to be station code. For example Osaka is:
http://ekitan.com/station/EnsenList?SFCODE=5006

Realization: Some trains can be on a line, but they would not be listed as stopping at a line they go through if it's a rapid train.

---

Just to make some progress, write a parser to find the adjacent stops? Got it.

Now... can I find all the stations by just doing some graph exploration?

Something like...

Get the first unexplored station ID.
Find all the station IDs from there.
If station ID was unknown then add it to exploration list.

OK this seems to work.

30.11.2015

Each page has a point but it is in some strange coordinate space.
However there is a utility to do conversion, so could convert all afterwards.
var p = new PointConverter(12491880, 48779780, "wgs");

Before spidering all should extract that and other possible information.
Also since this seems to cover all of Japan, maybe should just get whole Japan info?

The biggest thing besides that is line names and membership like which lines are on which stations.

Could maybe somehow determine line ordering as well?